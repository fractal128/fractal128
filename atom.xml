<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Fractal128 | We are OIers]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://fractal128.gitcafe.io/"/>
  <updated>2015-08-26T13:19:29.000Z</updated>
  <id>http://fractal128.gitcafe.io/</id>
  
  <author>
    <name><![CDATA[fractal128]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[BZOJ1004:[HNOI2008]Cards]]></title>
    <link href="http://fractal128.gitcafe.io/2015/08/21/bzoj1004-%EF%BC%BBHNOI2008%EF%BC%BDCards/"/>
    <id>http://fractal128.gitcafe.io/2015/08/21/bzoj1004-［HNOI2008］Cards/</id>
    <published>2015-08-21T05:52:40.000Z</published>
    <updated>2015-08-26T13:19:29.000Z</updated>
    <content type="html"><![CDATA[<p>算是水题吧，早已经嘴巴AC不知道多少遍了，实际写起来也花了些时间［希望赶快写了这篇blog好<ruby>补作业<rp> (</rp><rt>dǎ yóu xì</rt><rp>) </rp></ruby>。。。<br><a id="more"></a><br>题目链接<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1004/&quot;OTZ&quot;" target="_blank" rel="external">在此</a><br><br><br></p>
<h2 id="题目大意">题目大意</h2><p>n张牌用3种颜色进行染色，并且有m种洗牌的方式，并规定任意两种可以用洗牌而相互变化的染色方式算为一种，问总染色方法数。</p>
<h2 id="Solution">Solution</h2><p>如若没听过置换群之类的东西请先向⬇️浏览<br>明显m种洗牌方式为m中1～n的排列，并且可发现加上不洗牌的方式，即1-&gt;1,2-&gt;2,….，构成一个置换群。<br>引用burnside引理可以得到：<br>$$ L={1\over|G|}\cdot\sum_{i=1}^{s} D(a_{i})\ $$<br>公式解释：其中s为置换的数量，D(a[i])表示的是第i个置换后不发生变化的染色可能(不动点)的数量，L为等价类的数量，即题目所求的答案。<br>然而我们发现D(a[i])并不是很好求，介绍一个循环的概念：</p>
<ul>
<li>每个置换都可以写若⼲干互不相交的循环的乘积,两个 循环(a1a2…an)和(b1b2…bn)互不相交是指ai≠bj, i,j=1,2,…,n。例如:<br>$$\begin{pmatrix} 1&amp;2&amp;3&amp;4&amp;5  \\ 3&amp;5&amp;1&amp;4&amp;2\end{pmatrix}=(13)(25)(4)$$<br>容易发现，不动点的所有循环内的颜色应该一样，题目就被转化为一个简单的背包问题：每次对整一个循环内的染色方案进行决策，可设计方程：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f[i][r][b]表示前i 个循环用去r个红色染色，b个蓝色染色的方案，g可以通过前缀和-r-b进行计算。  </span><br><span class="line">转移方程: f[i][r][b]=f[i-<span class="number">1</span>][r<span class="operator">-s</span>[i]][b]+f[i-<span class="number">1</span>][r][b<span class="operator">-s</span>[i]]+f[i-<span class="number">1</span>][r][b]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>最后$$ ans = {每个方程的DP方程答案之和\over |G|} (mod    P) $$</p>
<h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn <span class="number">100</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[maxn],ss[maxn],a[maxn],dp[maxn][<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> Sr,Sg,Sb,m,M,sum;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>) ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123; x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>; ch=getchar();&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	vis[x]=<span class="number">1</span>; sum++;</span><br><span class="line">	<span class="keyword">if</span> (!vis[a[x]]) dfs(a[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=(a%=M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> q=b-<span class="number">1</span>; q&gt;<span class="number">0</span>; q=q&gt;&gt;<span class="number">1</span>)&#123; <span class="keyword">if</span> (q&amp;<span class="number">1</span>) ans=(ans*a) % M; a=(a*a) % M;&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Sr=read(); Sb=read(); Sg=read(); m=read(); M=read();</span><br><span class="line">	<span class="keyword">int</span> n=Sr+Sb+Sg;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m+<span class="number">1</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (i!=m+<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">				a[j]=read();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) a[j]=j;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">		<span class="keyword">if</span> (!vis[j])&#123;</span><br><span class="line">			sum=<span class="number">0</span>;</span><br><span class="line">			dfs(j);</span><br><span class="line">			s[++t]=sum;</span><br><span class="line">			ss[t]=ss[t-<span class="number">1</span>]+sum;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=t; j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>; r&lt;=Sr; r++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> b=<span class="number">0</span>; b&lt;=Sb; b++)&#123;</span><br><span class="line">					<span class="keyword">int</span> g=ss[j]-r-b;</span><br><span class="line">					<span class="keyword">if</span> (g&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">					<span class="keyword">if</span> (r&gt;=s[j]) tmp=(tmp+dp[j-<span class="number">1</span>][r-s[j]][b]) % M;</span><br><span class="line">					<span class="keyword">if</span> (b&gt;=s[j]) tmp=(tmp+dp[j-<span class="number">1</span>][r][b-s[j]]) % M;</span><br><span class="line">					<span class="keyword">if</span> (g&gt;=s[j]) tmp=(tmp+dp[j-<span class="number">1</span>][r][b]) % M;</span><br><span class="line">					dp[j][r][b]=tmp;</span><br><span class="line">				&#125;</span><br><span class="line">		ans+=dp[t][Sr][Sb]; ans%=M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans*(<span class="built_in">pow</span>(m+<span class="number">1</span>,M-<span class="number">2</span>)) % M);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="And_more…">And more…</h2><p>最后对于群论和pólya进行介绍和初步证明。</p>
<h3 id="群">群</h3><p>给定一个集合G={a,b,c,…}和集合G上的⼆元运算,并满足:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(a) 封闭性:∀a,b∈G, ∃c∈G, a*b=c。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(b) 结合律:∀a,b,c∈G, (a*b)*c=a*(b*c)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(c) 单位元:∃e∈G, ∀a∈G, a*e=e*a=a。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(d) 逆元:∀a∈G, ∃b∈G, a*b=b*a=e,记b=a-1。</p>
<h3 id="置换">置换</h3><p>置换:n个元素1,2,…,n之间的一个置换表示1被1到n 中的某个数a1取代,2被1到n中的某个数a2取代,直到n被1到n中的 某个数an取代,且a1,a2,…,an互不相同。</p>
<h3 id="置换群">置换群</h3><p>将上面两个概念合并。置换群的元素是置换,运算是置换的连接。例如：<br>$$\begin{pmatrix} 1&amp;2&amp;3&amp;4  \\ 3&amp;1&amp;2&amp;4\end{pmatrix}\begin{pmatrix} 1&amp;2&amp;3&amp;4  \\ 4&amp;3&amp;2&amp;1\end{pmatrix}=\begin{pmatrix} 1&amp;2&amp;3&amp;4  \\ 2&amp;4&amp;3&amp;1\end{pmatrix}$$<br>ps.置换群需满足群的所有性质，例如本题如果不加入不洗牌的决策，即单位元<br>$$\begin{pmatrix} 1&amp;2&amp;3&amp;4  \\ 1&amp;2&amp;3&amp;4\end{pmatrix} $$其余的置换并不能构成置换群。</p>
<h3 id="一个有用的公式：|E[k]|*|Z[k]|=|G|">一个有用的公式：|E[k]|*|Z[k]|=|G|</h3><ul>
<li><strong>Z[k] (K不动置换类)</strong>:设G是1…n的置换群。若K是1…n中某个元素, G中使K保持不变的置换的全体,记以Z[k],叫做G中使K保持不动的置换类,简称K不动置换类。</li>
<li><strong>E[k](等价类)</strong>:设G是1…n的置换群。若K是1…n中某个元素,K在G 作用下的轨迹,记作E[k]。即K在G的作用下所能变化成的所有元素的集合。</li>
<li><ruby>限于篇幅<rp> (</rp><rt>yīn wèi bú huì</rt><rp>) </rp></ruby>,这里就不对这个定理进行证明。</li>
</ul>
<h3 id="Burnside引理">Burnside引理</h3><p>设N={1,……,n}中共有L个等价类,N=E1+ E2+……+EL, 则当j和k属于同一等价类时,有│Zj│=│Zk│。所以<br>$$ \sum_{k=1}^{n} |Z_k|=\sum_{i=1}^{L}{\sum_{k∈E_i}|Z_k|}=\sum_{i=1}^{L} {|E_i|\cdot |Z_i|}= L\cdot |G|$$<br>$$L={1\over{|G|}}\sum_{k=1}^{n}{|Z_k|}={1\over{|G|}}\sum_{j=1}^{s}{|D_j|}$$</p>
<h3 id="pólya定理">pólya定理</h3><p>如果对于染色的数量没有限制，即将题目改成，用m种颜色染色，那么我们依然可以用某一置换不动点的每个循环的颜色相同的性质，得到式子：<br>$$L={1\over|G|}(m^{c(g1)}+m^{c(g2)}+…+m^{c(gn)})$$<br>其中c(gi)表示第i个置换的循环数量。</p>]]></content>
    <summary type="html">
    <![CDATA[<p>算是水题吧，早已经嘴巴AC不知道多少遍了，实际写起来也花了些时间［希望赶快写了这篇blog好<ruby>补作业<rp> (</rp><rt>dǎ yóu xì</rt><rp>) </rp></ruby>。。。<br>]]>
    
    </summary>
    
      <category term="BZOJ" scheme="http://fractal128.gitcafe.io/tags/BZOJ/"/>
    
      <category term="HNOI" scheme="http://fractal128.gitcafe.io/tags/HNOI/"/>
    
      <category term="burnside引理" scheme="http://fractal128.gitcafe.io/tags/burnside%E5%BC%95%E7%90%86/"/>
    
      <category term="pólya" scheme="http://fractal128.gitcafe.io/tags/polya/"/>
    
      <category term="一般递推" scheme="http://fractal128.gitcafe.io/tags/%E4%B8%80%E8%88%AC%E9%80%92%E6%8E%A8/"/>
    
      <category term="OI" scheme="http://fractal128.gitcafe.io/categories/OI/"/>
    
      <category term="群论" scheme="http://fractal128.gitcafe.io/categories/OI/%E7%BE%A4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读东野圭吾《解忧杂货店》的感受]]></title>
    <link href="http://fractal128.gitcafe.io/2015/08/17/%E8%AF%BB%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE%E3%80%8A%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97%E3%80%8B%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>http://fractal128.gitcafe.io/2015/08/17/读东野圭吾《解忧杂货店》的感受/</id>
    <published>2015-08-16T20:09:34.000Z</published>
    <updated>2015-08-18T08:46:45.000Z</updated>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如今回顾写作过程，我发现自己始终在思考一个问题：站在人生的岔路口，人究竟应该怎么做？我希望读者能在掩卷时喃喃自语：我从没读过这样的小说。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;————东野圭吾《解忧杂货店》<br><a id="more"></a></p>
<h2 id="Preface">Preface</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上个月我看了一本东野圭吾的书——《解忧杂货店》，若因为不是暑假的征文作业，也许人生中便要错失错失一次如此奇幻的经历了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只花了一个下午，便在咖啡馆读完了这整本书，是一种流畅，快活的感觉。不同的人，不同的故事，个个感人泪下，而在这些珍珠连成项链的时候，相信多数人都会不禁地赞叹世间万物的奇妙。给我的感觉，这本书就像是豆瓣里很多人评价的那样——最不“东野圭吾”的东野圭吾小说。  </p>
<h2 id="About">About</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整本书讲了很多的故事，多到读完全书以后很有可能记不住所有的故事，但神奇的是，你对于这些故事的感觉依然强烈。这份独特的心情，伴你一直从开篇到了结尾。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我也不想赘述每一个故事的起因经过，只是大概的聊聊这个杂货店。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这间杂货店因为因为店主爷爷和附近孩子们开的一些玩笑而提供了解忧的服务，起初也只是些孩子们的玩笑，慢慢地，店里收到了真正的烦恼和忧愁，而店主爷爷浪矢也用认真、真诚的态度回信，虽然有些时候并不能提供什么完美的解决方法，却也可以让那些咨询的人感到认同感或是有人陪伴的感觉，其实也如书中浪矢爷爷所说的一样“<strong>通常咨询者心里已经有了答案，找人咨询的目的，只是为了确认这个答案是正确的。所以，有些咨询者在看了我的回信后，会再写信给我，可能是我的回答和他原本想的不一样。</strong>”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;时光一转30多年过去了，网路上再次传来了有关于“解忧杂货店”的消息，称当年的杂货店咨询窗口会“复活”，希望当年接受过咨询的人们可以写一封回信诉说这些年来因为这些建议而带来的影响。那些因为浪矢爷爷的回信而改变了一生的人们纷纷从老店的卷闸门投入或是倾诉或是感激的回信，令人感到神奇的是，这些信件竟穿越了时空来到了33年前的杂货店，交到了浪矢的手中。而那些没有被浪矢所看见的咨询信，也鬼使神差地来到了33年后，被三个在店中暂时避难的小偷给拿到了，小偷们利用了过去的历史，即求助人的未来，真诚地给出自己的见解，虽然文化有限，连书写时也是错字连篇，也第一次感觉到了帮助别人解决烦恼的开心。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与常常出现出现于东野书中的连环杀人，密室悬疑不同，这本书中的故事更为“生活”，例如亲人与事业之间的两难、背井离乡打拼与继承家业的选择，这些都是常能出现于生活中的事，是每个人的故事。写出这样一个又一个本就闪耀的故事，再用上穿越时空这般神奇的丝线将其缀连，作者究竟想表达些什么呢？</p>
<h2 id="Thoughts">Thoughts</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;思索中，我想起浪矢爷爷最后给那个投递空白信件的人的回信，其中的一句令我印象深刻：“<strong>地图是白纸当然很伤脑筋，任何人都会不知所措。但是，不妨换一个角度思考，正因为是白纸，所以可以画任何地图，一切都掌握在你自己手上。你很自由，充满了无限可能。这是很棒的事。我衷心祈祷你可以相信自己，无悔地燃烧自己的人生。</strong> ”这段励志的文字足以激起每个迷茫的人内心的希望，白纸并不意味着你无处可走，相反，它意味着你无处不可走。丢失了地图，并不会迷路，而是有了重新画一张地图的机会。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有时想想，人生便就如同在一张地图上的旅程，有时走的是阳关大道，有事却是泥泞小路，也会碰上很多的岔路口，人们会在哪儿稍作停留，权衡着应该走哪条路才会有更好的未来。这是，也有人会犯难，求助别人的帮助，征求别人的意见，期待别人的赞同或是别人的经验。然而听了再多，想了再多，真正做出了这次改变的，以及整个人生的改变的，仍然是脚下的这个路口和被选择的那条路。一旦决定，大家便要各自向前，站在新的起点，继续旅程。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;没有人会在那一刻知道选择了左或右，在以后意味着什么，唯一能告诉你事实的是未来。它就像浪矢先生般，接受了每一个人的咨询，耐心细致地进行回答，并在合适的时刻给你它的回信。</p>
<h2 id="Example">Example</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这让我想起一位名人的故事。若不是Jobs在读大学时辍学，很有可能我们更本见不到Apple这个品牌的建立，若不是他在休学时学习了美术字的课程，了解了大量字体设计的艺术，那么现在个人电脑就不会有现在这么美妙的字型了。当然Jobs在大学的时候，还不可能把从前的点点滴滴串连起来，但是当他十年后回顾这一切的时候，真的豁然开朗了。他在斯坦福大学的演讲也提到了这件事，并说：“<strong>你在向前展望的时候不可能将这些片断串连起来，你只能在回顾的时候将点点滴滴串连起来。所以你必须相信这些片断会在你未来的某一天串连起来。你必须要相信某些东西：你的勇气、目的、生命、因缘。这个过程从来没有令我失望,只是让我的生命更加地与众不同而已。</strong>”</p>
<h2 id="End">End</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;书中的魔法，使得过去与未来相通，也使得浪矢可以近距离地咨询未来：我的那些回答在未来会是怎样？这就像是成人世界的童话，美妙却无法达到。回到现实，则犹如弗罗斯特所说的：</p>
<blockquote>
<p><em>我将轻轻叹息，叙述这一切<br>许多许多年以后：<br>林子里有两条路，<br>我——选择了行人稀少的那一条<br>它改变了我的一生。</em>  </p>
</blockquote>
<blockquote><p><em>I shall be telling this with a sigh<br>Somewhere ages and ages hence:<br>Two roads diverged in a wood, and I–<br>I took the one less traveled by,<br>And that has made all the difference.</em></p><footer><strong>Robert Frost</strong><cite>The Road Not Taken</cite></footer></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如今回顾写作过程，我发现自己始终在思考一个问题：站在人生的岔路口，人究竟应该怎么做？我希望读者能在掩卷时喃喃自语：我从没读过这样的小说。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;————东野圭吾《解忧杂货店》<br>]]>
    
    </summary>
    
      <category term="东野圭吾" scheme="http://fractal128.gitcafe.io/tags/%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE/"/>
    
      <category term="随记" scheme="http://fractal128.gitcafe.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ1143: [CTSC2008]祭祀river]]></title>
    <link href="http://fractal128.gitcafe.io/2015/08/16/river%E7%A5%AD%E7%A5%80/"/>
    <id>http://fractal128.gitcafe.io/2015/08/16/river祭祀/</id>
    <published>2015-08-15T23:09:34.000Z</published>
    <updated>2015-08-21T08:32:34.000Z</updated>
    <content type="html"><![CDATA[<p>前些日子WCMG给我（蒟蒻）们上过二分图，也讲了这道题，然而课上晕头转向，并没有搞清楚什么，这次认真学习了然而并没有什么用<br><a id="more"></a><br>题目链接：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1143" target="_blank" rel="external">http://www.lydsy.com/JudgeOnline/problem.php?id=1143</a></p>
<h2 id="题目大意:">题目大意:</h2><p>给出一个DAG，求出其最大点独立集（集合间任意两点不联通）</p>
<blockquote>
</blockquote>
<h2 id="Solution&amp;Story:">Solution&amp;Story:</h2><p>根据foreseeable大爷的课件，此问题可以转化为求改图的最小可相交路径覆盖。（下文会解释为什么）</p>
<p>我们可以先讨论一下如何求出改图的最小不可相交路径覆盖，可以讲图上的点u拆为(u,u’)，对于任意边(u,v),则连接(u,v’)，形成一个二分图，在上面跑二分图匹配，可得，</p>
<blockquote>
<p>  最小路径覆盖数＝G的点数－最小路径覆盖中的边数。</p>
</blockquote>
<p>应该使得最小路径覆盖中的边数尽量多，但是又不能让两条边在同一个顶点相交。</p>
<p>所以又可以得到最小路径覆盖数＝G的点数－二分图最大匹配数。而如果如果要求的是可相交路径覆盖，只需要预处理时用floyd得到两点间联通性然后手动加边即可。</p>
<p>下面再来填一下一开始的坑，为什么此问题可以转化为求改图的最小可相交路径覆盖。foreseeable大爷的课件上明明白白地写着dilworth定理，并写了一些介绍： 偏序集最大独立集（最长反链）＝最小链覆盖大小，然而这个公式我却根本看不懂，什么偏序集，什么反链，是该科普一下。</p>
<ul>
<li>偏序集：（可自行参看wikipedia）。而foreseeable大爷对其进行了简单说 明：什么是偏序关系:具有自反性，反对称性，传递性的一种关系。(更严谨定义请看组合数学类的书)</li>
<li>链:一个集合,集合中的任意数可比。</li>
<li>反链：一个集合，集合中任意的两数均不可以比较。</li>
</ul>
<p>接下来就是dilworth定理的严谨证明，foreseeable因课件空间太小不能完美地写下而留作了回家作业（费马既视感＝ ＝），下面便是交作业的时候了其实根本不会</p>
<blockquote>
<p>dilworth定理:最长反链＝最小链覆盖的大小（其对偶定理：最长链＝最小反链覆盖的大小</p>
</blockquote>
<ol>
<li><ul>
<li>首先，我们假设偏序集X最长反链长度为p,最小链覆盖为r。</li>
<li>因为反链内的任意两点不可比，所以它们肯定出现于不同的链中，所以r≤p。</li>
</ul>
</li>
<li><p>接下来我们分为两种情况进行考虑</p>
<ul>
<li>最长反链为最小元的集合或是最大元的集合或两者都是，那么我们可以取出一个最小元x和一个对应最大元y，然后通过归纳假设，可得偏序集X-{x,y}的最小链覆盖为r-1,加上x,y所形成的边覆盖，形成共有r条边的覆盖  </li>
<li>最长链既不为最小元的集合也不为最大元的集合，此时设这个最长链为A，并定义一下两个集合：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> P = &#123;x | x对于A中的某个a,有a≤x&#125;</span><br><span class="line"><span class="built_in">set</span> Q = &#123;x | x对于A中的某个a,有x≤a&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>有性质如下</p>
<ol>
<li>由于存在一个不在A中的极小元，故 P ≠ X;</li>
<li>由于存在一个不在A中的最大元，故 Q ≠ X;</li>
<li>P ∩ Q = A, 这是因为假如存在一个元素 x, 在 P ∩ Q中但不在A中, 那么我们就会对A中的某元素a1和a2有a1&lt;x&lt;a2, 这与A是反链矛盾。</li>
<li>P ∪ Q = X, 这是因为加入存在一个元素 x不在P ∪ Q 中，那么A ∪ {x}就是一个大小比A还要大的反链。</li>
</ol>
<p>然后我们可以使用归纳假设法，得到A+和A-都可以被划分为r个链，并且这些链的起点和终点分别都在A上，所以可以将A+和A-中的不同的链经过共同点而相连，最终形成覆盖的r条链。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn <span class="number">110</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,ind,ans,tot;</span><br><span class="line"><span class="keyword">bool</span> f[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> state[maxn],p[maxn],fir[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn*maxn],nex[maxn*maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=-<span class="number">1</span>; ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123; x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>; ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    b[++tot]=y; nex[tot]=fir[x]; fir[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hungray</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u=fir[x]; u; u=nex[u])&#123;</span><br><span class="line">        <span class="keyword">if</span> (state[b[u]]!=ind)&#123;</span><br><span class="line">            state[b[u]]=ind;</span><br><span class="line">            <span class="keyword">if</span> (p[b[u]]==<span class="number">0</span>||hungray(p[b[u]]))&#123;</span><br><span class="line">                p[b[u]]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read(); m=read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=read(); <span class="keyword">int</span> y=read();</span><br><span class="line">        f[x][y]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            f[i][j]|=f[i][k]&amp;f[k][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            <span class="keyword">if</span> (f[i][j]) add(i,j);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">0</span>; ind=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        ind++;</span><br><span class="line">        <span class="keyword">if</span> (hungray(i)) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,n-ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>前些日子WCMG给我（蒟蒻）们上过二分图，也讲了这道题，然而课上晕头转向，并没有搞清楚什么，这次认真学习了然而并没有什么用<br>]]>
    
    </summary>
    
      <category term="BZOJ" scheme="http://fractal128.gitcafe.io/tags/BZOJ/"/>
    
      <category term="ctsc" scheme="http://fractal128.gitcafe.io/tags/ctsc/"/>
    
      <category term="dilworth定理" scheme="http://fractal128.gitcafe.io/tags/dilworth%E5%AE%9A%E7%90%86/"/>
    
      <category term="二分图" scheme="http://fractal128.gitcafe.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="OI" scheme="http://fractal128.gitcafe.io/categories/OI/"/>
    
      <category term="二分图" scheme="http://fractal128.gitcafe.io/categories/OI/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World!]]></title>
    <link href="http://fractal128.gitcafe.io/2015/08/15/hello-world/"/>
    <id>http://fractal128.gitcafe.io/2015/08/15/hello-world/</id>
    <published>2015-08-15T06:09:34.000Z</published>
    <updated>2015-08-22T15:36:48.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is our very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is our very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
      <category term="test" scheme="http://fractal128.gitcafe.io/tags/test/"/>
    
      <category term="随记" scheme="http://fractal128.gitcafe.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
</feed>
